package com.yang.parser;

import com.alibaba.fastjson.JSONObject;
import com.yang.Comment;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CommentsParserTest {
    private String commentsJsonStr = "[{\"can_delete\":\"false\",\"comment_content\":\"防腐层是模型的一个规范，分享下我对防腐层的认知：<br>我接触防腐层的概念是从DDD的限界上下文开始的。Eric用细胞膜的概念来解释“限界”的概念，细胞膜只让细胞需要的物质进入细胞，同样，我们的代码之间业务也存在这个样一个界限，同一个对象的业务含义在不同的上下文中是不一样的。以在网上买书为例，在购买页面，我们的关注点在于这本书的名称，作者，以及分类，库存等信息；提交订单后，这本书就成为了订单上下文中的一个订单item，我们会关注这个item 的数量以及购买他的人是谁，以及书的配送地址等； 订单提交给仓库后，仓库会关心这本书还有没有库存，以及打包状态，分拣，物流等状态。<br>防腐层是在限界上下文之间映射（说白了就是交互）的方式，体现在代码上就是一个对象的转换，这个转换的意义在于隔离变化，防止因为对象在一个上下文中的变化扩散到其他的上下文中。<br><br>关于规范：<br>规范也是团队文化中很重要的一部分，以持续集成为例子，它的执行严格依赖于团队的开发纪律文化，以为了所谓赶进度而单元测试覆盖很低或者直接不写；采用分支策略方开发，一星期都合并不了主干，类似的人到处倒是，也就因为这一点，很多团队都在持续集成这个环节上掉队了。所以开发规范真的很重要，时刻谨记：混乱始于没有规范。\",\"comment_ctime\":\"1590425114\",\"comment_is_top\":\"false\",\"discussion_count\":\"3\",\"had_liked\":\"false\",\"id\":\"221201\",\"like_count\":\"68\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221201\",\"content\":\"非常好的补充！\",\"ctime\":\"1590490937\",\"id\":\"81652\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"293648201242\",\"ucode\":\"164CF3018071B2\",\"uid\":\"1258209\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg\",\"user_name\":\"段启超\"},{\"can_delete\":\"false\",\"comment_content\":\"业务讨论之后进行领域设计，画出出静态模型（包括子系统、模块等）和动态结构（交互等），或者先勾勒接口（内内外系统的区隔），再做模型。实际过程有很多反复，并且会进行角色代入，看模型能否支持业务，直到模型比较稳定\",\"comment_ctime\":\"1590409150\",\"comment_is_top\":\"false\",\"discussion_count\":\"5\",\"had_liked\":\"false\",\"id\":\"221118\",\"like_count\":\"30\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221118\",\"content\":\"你们做得很好\",\"ctime\":\"1590489595\",\"id\":\"81647\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"130439428030\",\"ucode\":\"B4C27B8335B76A\",\"uid\":\"1001710\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg\",\"user_name\":\"西西弗与卡夫卡\"}]";

    /**
     * <h2>
     * **`名字`**  *2020-05-26*
     *
     * > 防腐层是模型的一规范，分享下对
     * >
     * > 防腐层的认知：
     * >
     * > > `作者回复`：非常好的补充
     */
    @Test
    public void testParseTwoComments(){
        String result = "*** \n" +
                "**`段启超`** *2020/05/26*\n" +
                "> 防腐层是模型的一个规范，分享下我对防腐层的认知：我接触防腐层的概念是从DDD的限界上下文开始的。Eric用细胞膜的概念来解释“限界”的概念，细胞膜只让细胞需要的物质进入细胞，同样，我们的代码之间业务也存在这个样一个界限，同一个对象的业务含义在不同的上下文中是不一样的。以在网上买书为例，在购买页面，我们的关注点在于这本书的名称，作者，以及分类，库存等信息；提交订单后，这本书就成为了订单上下文中的一个订单item，我们会关注这个item 的数量以及购买他的人是谁，以及书的配送地址等； 订单提交给仓库后，仓库会关心这本书还有没有库存，以及打包状态，分拣，物流等状态。防腐层是在限界上下文之间映射（说白了就是交互）的方式，体现在代码上就是一个对象的转换，这个转换的意义在于隔离变化，防止因为对象在一个上下文中的变化扩散到其他的上下文中。关于规范：规范也是团队文化中很重要的一部分，以持续集成为例子，它的执行严格依赖于团队的开发纪律文化，以为了所谓赶进度而单元测试覆盖很低或者直接不写；采用分支策略方开发，一星期都合并不了主干，类似的人到处倒是，也就因为这一点，很多团队都在持续集成这个环节上掉队了。所以开发规范真的很重要，时刻谨记：混乱始于没有规范。\n" +
                "> > `作者回复`:非常好的补充！\n" +
                "<p align=\"right\">\uD83D\uDC4D : 68</p>\n" +
                "***\n" +
                "**`西西弗与卡夫卡`** *2020/05/25*\n" +
                "> 业务讨论之后进行领域设计，画出出静态模型（包括子系统、模块等）和动态结构（交互等），或者先勾勒接口（内内外系统的区隔），再做模型。实际过程有很多反复，并且会进行角色代入，看模型能否支持业务，直到模型比较稳定\n" +
                "> > `作者回复`:你们做得很好\n" +
                "<p align=\"right\">\uD83D\uDC4D : 30</p>\n" +
                "***\n";
        CommentsBuilder commentsBuilder = new CommentsBuilder();
        StringBuilder comments = commentsBuilder.build(JSONObject.parseArray(commentsJsonStr, Comment.class));
        System.out.println(comments.toString());
        assertEquals("评论解析错误",result,comments.toString());
    }

    @Test
    public void testBuild50Comments(){
        String str = "[{\"can_delete\":\"false\",\"comment_content\":\"防腐层是模型的一个规范，分享下我对防腐层的认知：<br>我接触防腐层的概念是从DDD的限界上下文开始的。Eric用细胞膜的概念来解释“限界”的概念，细胞膜只让细胞需要的物质进入细胞，同样，我们的代码之间业务也存在这个样一个界限，同一个对象的业务含义在不同的上下文中是不一样的。以在网上买书为例，在购买页面，我们的关注点在于这本书的名称，作者，以及分类，库存等信息；提交订单后，这本书就成为了订单上下文中的一个订单item，我们会关注这个item 的数量以及购买他的人是谁，以及书的配送地址等； 订单提交给仓库后，仓库会关心这本书还有没有库存，以及打包状态，分拣，物流等状态。<br>防腐层是在限界上下文之间映射（说白了就是交互）的方式，体现在代码上就是一个对象的转换，这个转换的意义在于隔离变化，防止因为对象在一个上下文中的变化扩散到其他的上下文中。<br><br>关于规范：<br>规范也是团队文化中很重要的一部分，以持续集成为例子，它的执行严格依赖于团队的开发纪律文化，以为了所谓赶进度而单元测试覆盖很低或者直接不写；采用分支策略方开发，一星期都合并不了主干，类似的人到处倒是，也就因为这一点，很多团队都在持续集成这个环节上掉队了。所以开发规范真的很重要，时刻谨记：混乱始于没有规范。\",\"comment_ctime\":\"1590425114\",\"comment_is_top\":\"false\",\"discussion_count\":\"3\",\"had_liked\":\"false\",\"id\":\"221201\",\"like_count\":\"68\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221201\",\"content\":\"非常好的补充！\",\"ctime\":\"1590490937\",\"id\":\"81652\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"293648201242\",\"ucode\":\"164CF3018071B2\",\"uid\":\"1258209\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg\",\"user_name\":\"段启超\"},{\"can_delete\":\"false\",\"comment_content\":\"业务讨论之后进行领域设计，画出出静态模型（包括子系统、模块等）和动态结构（交互等），或者先勾勒接口（内内外系统的区隔），再做模型。实际过程有很多反复，并且会进行角色代入，看模型能否支持业务，直到模型比较稳定\",\"comment_ctime\":\"1590409150\",\"comment_is_top\":\"false\",\"discussion_count\":\"5\",\"had_liked\":\"false\",\"id\":\"221118\",\"like_count\":\"30\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221118\",\"content\":\"你们做得很好\",\"ctime\":\"1590489595\",\"id\":\"81647\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"130439428030\",\"ucode\":\"B4C27B8335B76A\",\"uid\":\"1001710\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg\",\"user_name\":\"西西弗与卡夫卡\"},{\"can_delete\":\"false\",\"comment_content\":\"慢慢的，某个瞬间，突然觉得自己的工作不再是码农，而是软件设计，并且在工作中得到强烈的自我肯定。<br>一个好的软件设计思路，首先是符合大众习惯行为、符合日常常理，其次再是数据模型设计、技术范畴设计。<br>一个好的软件设计实现，往往可以很容易兼容正常合理的需求变更，对开发工作来说，掌握其核心，理论与实践相结合，可以事半功倍！\",\"comment_ctime\":\"1590419642\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221167\",\"like_count\":\"25\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221167\",\"content\":\"你把自己当做码农，你就是码农；你把自己当做优秀的程序员，你就是优秀的程序员。心理学上称之为皮格马利翁效应。\",\"ctime\":\"1590491059\",\"id\":\"81653\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"104669634746\",\"ucode\":\"07E6FEE43E1D61\",\"uid\":\"1107457\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/e6/01/0ccb7a7c.jpg\",\"user_name\":\"Ghoul Zhou\"},{\"can_delete\":\"false\",\"comment_content\":\"简单一点的项目，成员相互讨论（主要讨论业务场景和流程），内心会意即可。<br><br>复杂一点的项目，设计一般落脚在粒度较粗的文档上，往往也以说明业务流程为主，很少对实现过程中的细节文档化。<br><br>所以，我们的项目设计，模型一般会被业务场景和流程替代。文中的「模型」和「规范」，更多取决于工程师了。。。\",\"comment_ctime\":\"1590457499\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221261\",\"like_count\":\"12\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221261\",\"content\":\"对，你说的确实符合大部分做设计的方式。这种设计的关注点在于实现功能，而非构建模型。<br><br>这种做法容易让人忽略掉哪个东西是核心的，是模型，还是流程。流程是容易调整的，而模型如果变了，这个软件整个就变了。做设计的关键是，找到不变的东西。\",\"ctime\":\"1590637222\",\"id\":\"81804\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"53130065051\",\"ucode\":\"0A5E7CFD91A3CF\",\"uid\":\"1002252\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/4b/0c/dab49a2b.jpg\",\"user_name\":\"光明\"},{\"can_delete\":\"false\",\"comment_content\":\"还需要前面有个好的产品经理或是业务专家。以及公司有个好的文化。各种频繁的插队的需求，各种前后都无法闭环的需求。都是，软件产品异常大的阻碍\",\"comment_ctime\":\"1590407123\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221108\",\"like_count\":\"12\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221108\",\"content\":\"《10x 程序员工作法》在先，《软件设计之美》在后。\",\"ctime\":\"1590475655\",\"id\":\"81629\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"53130014675\",\"ucode\":\"B321F8014CD4DB\",\"uid\":\"1450899\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/16/23/93/dc0bbf78.jpg\",\"user_name\":\"木云先森\"},{\"can_delete\":\"false\",\"comment_content\":\"很多软件产品的需求都是一点点冒出来的，甚至中途需求还会去溜出去绕个弯，然后又回归，设计有种被牵着鼻子走的感觉，工期紧迭代快，结果就是设计的模型中有大量名不符实的定义，还有很多定义的补丁，实在很糟心，当然需求发展方向终会明朗，这时候就需要重构整理，包括设计和实现，同时又要应对新的业务开发，于是形成了两线或多线作战，苦啊！这样的情况除了增加团队，不知道老师有什么好的建议？\",\"comment_ctime\":\"1590405012\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221101\",\"like_count\":\"11\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221101\",\"content\":\"先去学《10x程序员工作法》，先别让人给自己捣乱，有一个合理的工作计划。如果你没时间学习，没时间做改进，别的东西都不用说了。<br><br>有了一个合理的安排之后，才是说要怎么改进，要怎么做得更好，消除欠下的技术债。\",\"ctime\":\"1590474555\",\"id\":\"81624\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"48835045268\",\"ucode\":\"6BF08FD8923E45\",\"uid\":\"1019289\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/8d/99/f886543d.jpg\",\"user_name\":\"渔夫\"},{\"can_delete\":\"false\",\"comment_content\":\"刚开始按照模型和规范走着，后来随着需求的改动，客户不停的催促，代码改动越来越乱，先把工作完成后再改规范，还是有什么好的办法。\",\"comment_ctime\":\"1590465600\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221293\",\"like_count\":\"7\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221293\",\"content\":\"首先，要分清楚哪些是人为的问题，哪些是设计的问题。赶工绝对是人为的问题，需要设置正确的预期，这是《10x 程序员工作法》讨论的范畴。<br><br>其次，如果是设计问题，需要把分清楚哪些是变的部分，哪些是不变的部分。不变的部分花力气去设计，变的部分需要等一等，等它相对稳定一些，再花大力气去设计。<br><br>规范主要是针对你需要花力气去设计的部分，混乱的部分，就先混乱着。让子弹飞一会儿。\",\"ctime\":\"1590586068\",\"id\":\"81761\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"31655236672\",\"ucode\":\"DF2D61E6FB2FCE\",\"uid\":\"1049017\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/01/b9/bd62c957.jpg\",\"user_name\":\"y欧尼酱\"},{\"can_delete\":\"false\",\"comment_content\":\"老师您好，我们有一套基于DDD思想的程序开发模板，我们为了避免个体开发差异，所以建议大家都使用统一的开发模板。目前我面临着两个问题<br>1、针对某些使用简单分层架构即可解决问题的服务，是允许使用简单分层架构还是使用统一的DDD开发模板？<br>2、统一开发模板在一定程度上规避了个体差异上的劣势。那么个体差异上的优势如何更好的体现呢？\",\"comment_ctime\":\"1592362099\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"227353\",\"like_count\":\"6\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"227353\",\"content\":\"把 DDD 当做一个模板，这个理解方式本身是没有问题的，它就是告诉你，如何把设计中的模型分门别类的放置，后面我们讲 DDD，差不多也是这个思路。<br><br>对于任何一个系统而言，需求都是一点一点增加的，前期不做设计，后期改动起来，难度就非常大了。所以，核心的点在于，设计要做好，别看它现在简单。分层不是你的设计，而构建出你的模型才是设计。<br><br>我不是特别理解你们按照 DDD 思想的开发模板到底是个什么东西，是一个开发框架，还是一个思维工具，所以，不敢妄加判断。<br><br>对于一个团队而言，开发的一致性比个性要重要，因为没有人可以保证一直在一个团队工作下去。<br><br>如果你真的有不错的理念，去做规范和框架的级别的优化、去做算法上的优化，不要在小的地方体现创造力，意义不大。\",\"ctime\":\"1592436569\",\"id\":\"83845\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"27362165875\",\"ucode\":\"BA9B69CEDA6176\",\"uid\":\"1747737\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/1a/ab/19/829f321f.jpg\",\"user_name\":\"迈步\"},{\"can_delete\":\"false\",\"comment_content\":\"文章在开篇提出的关于软件设计的问题，其实也是我现在的困惑，因为在做求职前的准备，感觉有很多东西要学，极客时间的专栏那么多，眼花缭乱。如何才能提高自己的求职成功率呢？<br><br>软件开发是为了解决问题，而软件设计就是在需求和解决方案之间的桥梁。<br><br>对于“软件设计就是构建出一套模型”这个说法，我感觉似乎有点过于抽象了，虽然文中列举的那个交易系统模型，确实很简洁、准确。<br><br>如果单独来看“模型”和“规范（约束）”都比较容易理解，但是如果说软件设计就是设计出模型和规范来，又有些不好理解了。特意去看了一下 Wiki:<br><br>Software design is the process by which an agent create a specification of a software artifact, intended to accomplish goals, using a set of primitive components and subject to constraints.<br><br>感觉上自己以前可能更看重软件开发的结果，而忽视了其中的模型和约束。<br><br>在这之前，如果拿到一个项目，大概会先看看是 CS 还是 BS 的，一般会采用 MVC 或者是分层模型，然后再去看看有没有其他的开源软件可以借鉴，之后就开始码程序了，编写代码边修改，可能从整体设计上考虑的比较少。<br><br>看了一下留言，发现自己之前可能局限于个体软件作坊，并没有正式或者完整的软件设计过程。那么我有一个问题：软件设计是只适用于相对复杂一些的软件开发过程么？如果程序本身比较简单，而且是那种“用完即焚”式的，是否还需要设计？<br><br>另外一个问题，就是软件设计和架构设计的区别在哪里？应该不仅仅是范围大小的差别吧 。<br><br>期待后续的专栏。\",\"comment_ctime\":\"1590563371\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221673\",\"like_count\":\"7\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221673\",\"content\":\"非常感谢你的补充！<br><br>我不会为 Hello，World 做设计，因为它真的“用完即焚”，在开篇词里我说过，设计是应对需求规模的算法。需求越来越多，设计和不设计的差别就会体现出来。但是，你不学习软件设计的话，想直接应对复杂软件是不可能的。<br><br>关于软件的设计过程，我们后面会讲到 DDD，你可以关注一下。<br><br>软件设计和架构设计，其实是没有区别的，只不过，通常把高层一些的设计称为架构设计，但我们这里所学的设计原则同样适用于架构设计。\",\"ctime\":\"1590582661\",\"id\":\"81751\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"27360367147\",\"ucode\":\"1F4204930E47C4\",\"uid\":\"1020525\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg\",\"user_name\":\"escray\"},{\"can_delete\":\"false\",\"comment_content\":\"我独立设计的第一个项目整体来说，是失败的。就是盲目模仿前项目，没理解，分层，抽象，接口，模型等设计概念，最终项目陷入很麻烦的技术问题。\",\"comment_ctime\":\"1590420759\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221172\",\"like_count\":\"4\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221172\",\"content\":\"应该说是独立“实现”了一个项目。\",\"ctime\":\"1590475704\",\"id\":\"81630\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"18770289943\",\"ucode\":\"48F2AEB989C12A\",\"uid\":\"1001893\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg\",\"user_name\":\"小文同学\"},{\"can_delete\":\"false\",\"comment_content\":\"先来补课10x程序员工作法\",\"comment_ctime\":\"1590590409\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221778\",\"like_count\":\"3\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221778\",\"content\":\"先能分清楚问题在哪，然后，再来解决。\",\"ctime\":\"1590618745\",\"id\":\"81780\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"14475492297\",\"ucode\":\"A6BD92B79B3632\",\"uid\":\"1549364\",\"user_header\":\"\",\"user_name\":\"Geek_3b1096\"},{\"can_delete\":\"false\",\"comment_content\":\"熟悉的声音回来了。\",\"comment_ctime\":\"1590408953\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221117\",\"like_count\":\"3\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221117\",\"content\":\"也欢迎你回来！\",\"ctime\":\"1590475437\",\"id\":\"81627\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"14475310841\",\"ucode\":\"2FD194C4DA26E5\",\"uid\":\"1021539\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg\",\"user_name\":\"捞鱼的搬砖奇\"},{\"can_delete\":\"false\",\"comment_content\":\"很多IT legacy项目，存在了7，8年甚至更久。对比起项目刚开始的时候，语言，框架，best practices， 需求，人员变更等都往往都已经很不一样了。 对着这种“祖传”项目，往往文档缺失，结构复杂，动一发而牵千全身；<br><br>对这种项目做设计优化，该从哪些方面切入呢？<br>\",\"comment_ctime\":\"1590477606\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221336\",\"like_count\":\"2\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221336\",\"content\":\"设计改进将在专栏的最后与大家讨论，敬请期待！\",\"ctime\":\"1590585601\",\"id\":\"81759\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"10180412198\",\"ucode\":\"C23945AA617C91\",\"uid\":\"1086582\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/94/76/aa2202b7.jpg\",\"user_name\":\"Wei\"},{\"can_delete\":\"false\",\"comment_content\":\"前台业务变化快 经常这次上线验证效果不好就推翻重做。对于扩展和规划的要求就更高了。现在都是做一步想三步。根据经验考虑后面会有什么变化。。\",\"comment_ctime\":\"1590470437\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221312\",\"like_count\":\"2\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221312\",\"content\":\"不管什么系统，都有一部分内容是稳定的，一部分内容是不稳定的。所以，我们设计的重点就是把稳定的和不稳定的隔离开来。不稳定的验证不好，丢了就丢了，没什么可惜的。千万不要做过度的设计，浪费精力，后面会讲到简单设计。\",\"ctime\":\"1590585703\",\"id\":\"81760\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"10180405029\",\"ucode\":\"94A1EE540BC9CA\",\"uid\":\"1067406\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/49/8e/e6eaf434.jpg\",\"user_name\":\"大王拍我去巡山\"},{\"can_delete\":\"false\",\"comment_content\":\"向贝佐斯学习，做事情要建立在不变的东西上。<br><br>模型是一个理解世界的抽象模型，就像科学理论一样。好的模型应该是稳定的，简洁的。<br><br>规范也不能朝令夕改，规范就是做事的高层原则，相当于“公理”。公理要么来自于根深蒂固的人性（广义的，中性的，如懒惰，两点之间直线最短），要么就是大量经验教训的积累（如业界各公司如阿里巴巴开发手册之类）。（这里看出为什么小公司规范意识稀缺了，踩得坑不足，积累经验不足，你就是想规范也规范不起来。解决办法就是参考业界或大公司的规范，当然不能照搬。）\",\"comment_ctime\":\"1590456292\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221250\",\"like_count\":\"2\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221250\",\"content\":\"编码规范和设计规范还是有所差异的。编码规范的适用范围会更大一些，设计规范则适用于一个特定的项目。\",\"ctime\":\"1590661530\",\"id\":\"81841\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"10180390884\",\"ucode\":\"A890935A982988\",\"uid\":\"1482915\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg\",\"user_name\":\"业余爱好者\"},{\"can_delete\":\"false\",\"comment_content\":\"看完之后，还是不能理解我的增删改查项目如何划分出模型，现在的项目业务和技术是混合在一起的。求一个解释\",\"comment_ctime\":\"1611273819\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"275003\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"275003\",\"content\":\"这就需要学习如何去设计一个模型，如果希望快速了解，不妨先看看 DDD 的那个部分，了解一下模型是如何建立的。\",\"ctime\":\"1611301501\",\"id\":\"99789\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5906241115\",\"ucode\":\"CFD52127AA6E1D\",\"uid\":\"1120997\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg\",\"user_name\":\"favorlm\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计: 模型+规范，模型: 高内聚，低耦合; 可分层\",\"comment_ctime\":\"1605781453\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"262618\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"5900748749\",\"ucode\":\"B23A087DD69D4D\",\"uid\":\"2305847\",\"user_header\":\"\",\"user_name\":\"脚踏实地\"},{\"can_delete\":\"false\",\"comment_content\":\"老师您好，请问您文章中说的「交易原语」在代码中是如何体现的呢？是指把不同的动作放到一个事务中吗？比如「成交」这个原语是不同账户的出金和入金这两个操作放在一个事务里？\",\"comment_ctime\":\"1594737886\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"234628\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"234628\",\"content\":\"原语是一个一个小类或小方法，动作则是原语的组合，它是放到一个事务中的。你读“成交”这个动作的理解是对的，是在一个事务中执行的。\",\"ctime\":\"1594864268\",\"id\":\"86721\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5889705182\",\"ucode\":\"4B7DACE6DBCF95\",\"uid\":\"1281460\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg\",\"user_name\":\"邵俊达\"},{\"can_delete\":\"false\",\"comment_content\":\"我们代码里通常把防腐曾叫adapter\",\"comment_ctime\":\"1591927771\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"226008\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"226008\",\"content\":\"有一些类似的地方，但不完全一样。\",\"ctime\":\"1592046957\",\"id\":\"83348\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5886895067\",\"ucode\":\"F32E5E1B63CC90\",\"uid\":\"1014505\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg\",\"user_name\":\"亚伦碎语\"},{\"can_delete\":\"false\",\"comment_content\":\"我提供一个遇到过的规范不合理的场景：<br><br>我们公司的技术框架是在 [ASP.NET](http:&#47;&#47;asp.net&#47;) 的 MVC 基础上搭建的分层的快速快发系统，很长一段时间都是还是在视图这一层去用 jQuery 来做一个一些简单的交互，因为交互简单，Controller 这一层就负责和视图通讯，许多数据都从 Context（我们这里叫做功能层）取了之后就直接放到 Controller 来用，当时是够用的。<br><br>接下来，我们开始了前后端分离，需要处理更负责的交互了，一个页面上可能是来自多个接口的数据，原来的 Controller 很难满足需求。<br><br>不仅仅很难满足需求，还带来了更多的问题：比如 ASP.NET 的 MVC 根本就不是为提供服务接口而设计的，那么像跨域这种问题，就只能通过修改 web.config 的方式去做，就根本就不是解决跨域的好方法。<br><br>这些问题虽然更准确的来说算是技术债务，不过确实也是我们公司负责人搞了一个快速开发框架规范并试图用这个规范去解决所有问题导致的技术债务。<br><br>我目前的工作是前端开发工程师，虽然知道了这个问题，不过我暂时没有余力去解决这个问题，感觉很无力。\",\"comment_ctime\":\"1591262468\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"224046\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"5886229764\",\"ucode\":\"4FD20C9D4C71A8\",\"uid\":\"1005214\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/56/9e/e15a63bb.jpg\",\"user_name\":\"jokar\"},{\"can_delete\":\"false\",\"comment_content\":\"诚如郑老师所言，提到软件设计，一开始涌入头脑的便是框架或项目的结构。感觉有很多内容，无法完整的组织在一起。模型+规范，言简意赅，将软件设计的精髓提炼了出来。从“10x程序员”到这里，郑老师一如既往地将最简练、精髓的部分呈现在我们眼前。让我们看到郑老师眼中的程序世界，这给了我们身处泥潭，却能仰望山巅的风景途径。感谢郑老师的分享，加油学习.\",\"comment_ctime\":\"1591232110\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"223914\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"223914\",\"content\":\"承蒙夸奖，也欢迎邀请更多的小伙伴们一起来学习！\",\"ctime\":\"1591315173\",\"id\":\"82540\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5886199406\",\"ucode\":\"AF6E33D6753A1A\",\"uid\":\"2011223\",\"user_header\":\"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLW4xGESQvNVmIic78DdDjH6yWUEiav2KBS9d8E0F4WXGUkHBqJnT3XNZGELVFqBSQUPHZTvhTjeJKw/132\",\"user_name\":\"刘拯均\"},{\"can_delete\":\"false\",\"comment_content\":\"1.我现在在项目中采用ddd的分层架构。（不要求领域模型设计，仅限定了基本实现规范）<br>2.因为整个公司缺乏显示统一的规范，我希望引入ddd的分层架构去限定这个规范。而且，项目本身虽是微服务技术栈，但模型本质还是大单体，用ddd挺好。（如果是真的微服务，不需要采用ddd的分层，ddd分层架构的理念应该在系统架构上去体现，落地到具体微服务包应该要对这些复杂性无感）<br>3.起了分层的目录结构，做了下各层作用的讲解，前期大部分需求，我都定义好api，然后让队友们来实现。结果还是不理想。问题不在于知识难不难，而在个人意愿和市场需求。相对于个人代码质量的追求，大多数人更愿意把时间放在技术上。毕竟技术面试占分更高，且武学学会了就是会了，能做到分毫不差，短期既有价值。而内功除了学会，还要积累，短期难有成效。人往往都有点浮躁。\",\"comment_ctime\":\"1590419579\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221166\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221166\",\"content\":\"你们的设计已经算得不错的了。\",\"ctime\":\"1590662205\",\"id\":\"81842\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5885386875\",\"ucode\":\"4C03928388C413\",\"uid\":\"1251111\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg\",\"user_name\":\"Jxin\"},{\"can_delete\":\"false\",\"comment_content\":\"方法论有了，如何落地是个问题\",\"comment_ctime\":\"1590403379\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221092\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221092\",\"content\":\"我们一起来探讨。\",\"ctime\":\"1590464509\",\"id\":\"81615\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5885370675\",\"ucode\":\"F85D250C11ED70\",\"uid\":\"1059766\",\"user_header\":\"https://wx.qlogo.cn/mmopen/vi_32/4pFDynicvRnrTTRavia64UAknQjyX3KFfm67W4AZG52wm2TgwL1FWNX1zhIlIVgicPw2jzPqKASAib5nI1QfY6pc2Q/132\",\"user_name\":\"上山砍柴\"},{\"can_delete\":\"false\",\"comment_content\":\"老师好，我又来上课了\",\"comment_ctime\":\"1590399263\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"221078\",\"like_count\":\"1\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221078\",\"content\":\"一起来提高，也欢迎分享给更多的同事和朋友！\",\"ctime\":\"1590460731\",\"id\":\"81605\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"5885366559\",\"ucode\":\"C22623ECEB8DBA\",\"uid\":\"1188144\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg\",\"user_name\":\"北天魔狼\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计，应该包括模型和规范。--记下来\",\"comment_ctime\":\"1651838891\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"344894\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1651838891\",\"ucode\":\"D0565908C99695\",\"uid\":\"2550743\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg\",\"user_name\":\"李二狗\"},{\"can_delete\":\"false\",\"comment_content\":\"我在项目中，也会对当前要实现的业务做设计，我会对整个业务建模，至少知道这个业务流程中涉及到了哪些概念、概念与概念之间的关系、概念内部的数据流如何处理等等。\",\"comment_ctime\":\"1650499075\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"342824\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1650499075\",\"ucode\":\"BD53829E924B66\",\"uid\":\"1193874\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg\",\"user_name\":\"庖丁解牛\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计包括模型和规范两部分\",\"comment_ctime\":\"1650379102\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"342642\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1650379102\",\"ucode\":\"A1B8D3C01FB937\",\"uid\":\"1529642\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/17/57/2a/3369dbfe.jpg\",\"user_name\":\"Nio\"},{\"can_delete\":\"false\",\"comment_content\":\"模型就是描述输入输出的关系，放之软件设计，就是输入输出的框架。放之数学，就是输入输出的数学关系式，放之函数就是输入输出的函数。\",\"comment_ctime\":\"1646875327\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"337508\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1646875327\",\"ucode\":\"8DFC2DD03D7E51\",\"uid\":\"2696335\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/29/24/8f/77140e34.jpg\",\"user_name\":\"云会宾\"},{\"can_delete\":\"false\",\"comment_content\":\"一个普通程序员就像施工单位的泥瓦工，每天做自己熟悉领域内的工作，高级程序员更像是盖房的室内空间设计师，在已定架构下通过硬装与软装满足客户要求\",\"comment_ctime\":\"1638493820\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"324533\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"324533\",\"content\":\"可见离架构师还有很长的路要走\uD83D\uDE04\",\"ctime\":\"1639321241\",\"id\":\"118238\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"编辑\",\"utype\":\"1\"}],\"score\":\"1638493820\",\"ucode\":\"F9FA980A9F8A1C\",\"uid\":\"2712653\",\"user_header\":\"https://thirdwx.qlogo.cn/mmopen/vi_32/kBKTRyV4wnhV4YN9iaFgKYIJ4451n0zIiazFumcSpCXdEDhdexgc8PQdrDEmy4BCOUgsUlibicEwQlGo6K5Nibv7SEg/132\",\"user_name\":\"托马斯赵四\"},{\"can_delete\":\"false\",\"comment_content\":\"原来模型分层的目的是可叠加！\",\"comment_ctime\":\"1634215244\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"316237\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1634215244\",\"ucode\":\"1C6201EDB4E954\",\"uid\":\"1121758\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg\",\"user_name\":\"aoe\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计，我理解，就是实现业务到软件的映射。<br>这种映射需要满足：<br>适应性:对外来说，适应业务变化和发展。<br>健康度:对软件系统自身来说，变化带来复杂度，需要保证在适应变化的同时保持软件系统的健康。<br>缺少这一层，很明显，以上两点要求在未来都无法得到满足。\",\"comment_ctime\":\"1632623443\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"313698\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1632623443\",\"ucode\":\"DB08AEFBD6DF2B\",\"uid\":\"1232973\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg\",\"user_name\":\"Bravery168\"},{\"can_delete\":\"false\",\"comment_content\":\"我想要从零开发一个软件，有想要这个软件拥有可拓展性，模块化的时候，就需要仔细思考软件的设计问题了\",\"comment_ctime\":\"1631631810\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"312127\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1631631810\",\"ucode\":\"83C8175F3E8A47\",\"uid\":\"2755994\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/2a/0d/9a/50959587.jpg\",\"user_name\":\"R@β11t\"},{\"can_delete\":\"false\",\"comment_content\":\"程序员所面对的第一层抽象层级的模型 是不是就是业务需求\",\"comment_ctime\":\"1629264836\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"307808\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"307808\",\"content\":\"业务需求可不一定是抽象的\",\"ctime\":\"1629292595\",\"id\":\"111473\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1629264836\",\"ucode\":\"5310E02F8DF1F0\",\"uid\":\"1359669\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg\",\"user_name\":\"晴天了\"},{\"can_delete\":\"false\",\"comment_content\":\"模型所处于的层级纬度，是根据调用者的需要实现的嘛\",\"comment_ctime\":\"1629264613\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"307807\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1629264613\",\"ucode\":\"5310E02F8DF1F0\",\"uid\":\"1359669\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg\",\"user_name\":\"晴天了\"},{\"can_delete\":\"false\",\"comment_content\":\"我的设计是根据产品需求设计为不同的模型，模型与模型之间是怎么交互。再根据模型设计表结构，系统规范去对代码实现进行分层\",\"comment_ctime\":\"1625794800\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"301635\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"301635\",\"content\":\"嗯，模型先行，后设计数据库。\",\"ctime\":\"1625810420\",\"id\":\"109200\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1625794800\",\"ucode\":\"DC2F7F2C0C8F60\",\"uid\":\"1965699\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg\",\"user_name\":\"慎独明强\"},{\"can_delete\":\"false\",\"comment_content\":\"郑老师，模型指的是领域模型还是数据模型，有点抽象\",\"comment_ctime\":\"1621868787\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"294302\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1621868787\",\"ucode\":\"4C21A1F3038048\",\"uid\":\"1759442\",\"user_header\":\"\",\"user_name\":\"Geek_9c7788\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计和架构设计的关系是什么\",\"comment_ctime\":\"1621472179\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"293629\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"293629\",\"content\":\"其实是一回事。\",\"ctime\":\"1621692858\",\"id\":\"106629\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1621472179\",\"ucode\":\"A8A2E3E57BD029\",\"uid\":\"1914504\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg\",\"user_name\":\"Simon\"},{\"can_delete\":\"false\",\"comment_content\":\"就是现在要做设计了，现学现卖\uD83D\uDE02\",\"comment_ctime\":\"1621420555\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"293531\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"293531\",\"content\":\"加油！\",\"ctime\":\"1621692867\",\"id\":\"106630\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1621420555\",\"ucode\":\"C61A772E090168\",\"uid\":\"1697046\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/19/e5/16/244680b8.jpg\",\"user_name\":\"坏笑 cover\uD83C\uDF4A\uD83C\uDF6D\uD83C\uDF6D\"},{\"can_delete\":\"false\",\"comment_content\":\"学习了这篇文章，然后看了一下整个课程的设计，觉得大部分都是在讲原理、理论。不知道课程里面有没有穿插实例。课程后面要是有一两个案例来巩固原理就好了\",\"comment_ctime\":\"1615022904\",\"comment_is_top\":\"false\",\"discussion_count\":\"2\",\"had_liked\":\"false\",\"id\":\"282033\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"282033\",\"content\":\"矛盾就是，篇幅太长，读者坚持不下来，篇幅太短，读者理解不到位。\",\"ctime\":\"1615092069\",\"id\":\"102430\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1615022904\",\"ucode\":\"0C13574850362C\",\"uid\":\"1721366\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/1a/44/16/c33b5eab.jpg\",\"user_name\":\"青青子菁\"},{\"can_delete\":\"false\",\"comment_content\":\"作为一个前端开发，大部分时间都需要和业务打交道。对业务模型的抽象直接决定了项目质量的好坏。\",\"comment_ctime\":\"1606401009\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"264273\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"264273\",\"content\":\"前后端都一样。\",\"ctime\":\"1606460805\",\"id\":\"95872\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1606401009\",\"ucode\":\"313862C91DD325\",\"uid\":\"1017161\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg\",\"user_name\":\"皮特尔\"},{\"can_delete\":\"false\",\"comment_content\":\"软件设计就是要构建出一套模型，而软件模型就是这个软件的骨架和核心。\",\"comment_ctime\":\"1603084271\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"254218\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1603084271\",\"ucode\":\"789A1FBA8408F3\",\"uid\":\"1898806\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/1c/f9/36/f44b633e.jpg\",\"user_name\":\"bidinggong\"},{\"can_delete\":\"false\",\"comment_content\":\"老师，程序设计 架构设计 软件设计 软件工程这四个概念有什么区别和联系呢？\",\"comment_ctime\":\"1597306694\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"241478\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"241478\",\"content\":\"程序设计，通常指的写代码实现具体功能的地方，架构设计和软件设计在我心中是一致的，主要是架构模型和规范（这也是《软件设计之美》中讲的），软件工程，主要是如何进行开发，可以这么说，设计和编码是软件工程中的一环。\",\"ctime\":\"1611728908\",\"id\":\"100137\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1597306694\",\"ucode\":\"EA504931C0B932\",\"uid\":\"1060150\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/2d/36/d3c8d272.jpg\",\"user_name\":\"HF\"},{\"can_delete\":\"false\",\"comment_content\":\"&quot;你总算理解了 Observer 模式，却有人告诉你 JDK 中早就提供了原生的支持，但更好的做法应该是用 Guava 的 EventBus&quot;<br>Python 直接在语法上支持装饰器（decorator）模式~\",\"comment_ctime\":\"1595235021\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"235887\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"235887\",\"content\":\"语言的差异，这就是后面要讲的一个关键点。\",\"ctime\":\"1595249886\",\"id\":\"87143\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1595235021\",\"ucode\":\"9816F796252948\",\"uid\":\"1275098\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/13/74/da/44fe2db8.jpg\",\"user_name\":\"周宁\"},{\"can_delete\":\"false\",\"comment_content\":\"现在在小团队，后端有两个人，需求迭代开发前，组内做设计评审，主要是数据结构和性能方面，没啥问题，就直接开发了，学习本门课程主要想为以后做储备，也会想办法将课程学到的内内容应用到实际工作中。\",\"comment_ctime\":\"1593161707\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"229843\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"229843\",\"content\":\"数据结构和性能主要是实现方面，后面会讲到，这只是设计的一部分。\",\"ctime\":\"1593175829\",\"id\":\"84820\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1593161707\",\"ucode\":\"DBEAFFB7660813\",\"uid\":\"1001225\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/47/09/316b0aa1.jpg\",\"user_name\":\"张浩\"},{\"can_delete\":\"false\",\"comment_content\":\"乱七八糟肯定失控，赞同老师说的颗粒度的规范\",\"comment_ctime\":\"1592623431\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"228247\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"228247\",\"content\":\"失控，每个都遭遇过的痛苦。\",\"ctime\":\"1592905311\",\"id\":\"84505\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1592623431\",\"ucode\":\"E3F15FB8576626\",\"uid\":\"1653332\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/19/3a/54/72402617.jpg\",\"user_name\":\"上善若水\"},{\"can_delete\":\"false\",\"comment_content\":\"流变是常态\",\"comment_ctime\":\"1592622973\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"228246\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"228246\",\"content\":\"然\",\"ctime\":\"1592793283\",\"id\":\"84336\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1592622973\",\"ucode\":\"E3F15FB8576626\",\"uid\":\"1653332\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/19/3a/54/72402617.jpg\",\"user_name\":\"上善若水\"},{\"can_delete\":\"false\",\"comment_content\":\"是否设计，随着需求规模的变大，效果会凸现出来。模型是构建骨架，各自器官及关系，这种内在的东西，决定了软件的本质。运维，扩展其实是对软件做手术，设想一下，你面对一个无脊椎，各器官混在一起的生物，你敢下手吗，分分钟可能弄死他。<br><br>规范也非常重要，经常听说标准先行，无规矩不成方圆，规范也是执行力的体现。规范无处不在，UI规范，数据库设计规范，编码规范，日报 周报规范，发布规范，文档规范，只要有人的地方，有江湖就要有规范。越早认识到规范的重要性，越重要，在一开始活动之前就规范先行的意识，有规范就遵守，无规范就创建，以文档，流程方式固化下来，并持续优化。规范与文化，与最佳实践也有内在联系。我想模型定义了软件的骨架（业务决定架构，模型承载和映射业务的本质）。规范定了内部次序，约束。\",\"comment_ctime\":\"1592439099\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"227585\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"227585\",\"content\":\"理解得不错！\",\"ctime\":\"1592444365\",\"id\":\"83874\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1592439099\",\"ucode\":\"4C6D46E5EC17CF\",\"uid\":\"1090512\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/10/a3/d0/882b5388.jpg\",\"user_name\":\"吴建中\"},{\"can_delete\":\"false\",\"comment_content\":\"文中的交易系统是火币吧\uD83D\uDE1C哈哈哈\",\"comment_ctime\":\"1591196310\",\"comment_is_top\":\"false\",\"discussion_count\":\"0\",\"had_liked\":\"false\",\"id\":\"223850\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"score\":\"1591196310\",\"ucode\":\"C5CFEE0CB29ADF\",\"uid\":\"1511344\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/17/0f/b0/f2072176.jpg\",\"user_name\":\"Chloe\"},{\"can_delete\":\"false\",\"comment_content\":\"行动始于设计，想明白才能做明白，很棒的专栏，赞！\",\"comment_ctime\":\"1590753064\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"222338\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"222338\",\"content\":\"欢迎分享给更多的小伙伴！\",\"ctime\":\"1590758934\",\"id\":\"82026\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1590753064\",\"ucode\":\"69C7DDA408192F\",\"uid\":\"1006464\",\"user_header\":\"https://static001.geekbang.org/account/avatar/00/0f/5b/80/114f589c.jpg\",\"user_name\":\"宋子龙\"},{\"can_delete\":\"false\",\"comment_content\":\"嗯。。项目的设计是视图、数据、模型\",\"comment_ctime\":\"1590423166\",\"comment_is_top\":\"false\",\"discussion_count\":\"1\",\"had_liked\":\"false\",\"id\":\"221198\",\"like_count\":\"0\",\"product_id\":\"100052601\",\"product_type\":\"c1\",\"replies\":[{\"comment_id\":\"221198\",\"content\":\"一种非常典型的做法。\",\"ctime\":\"1590662253\",\"id\":\"81843\",\"uid\":\"1258861\",\"user_name\":\"作者回复\",\"user_name_real\":\"郑晔\",\"utype\":\"1\"}],\"score\":\"1590423166\",\"ucode\":\"293321CC198C0C\",\"uid\":\"1174517\",\"user_header\":\"http://thirdwx.qlogo.cn/mmopen/vi_32/aY5QA2COoiaGy7P3MJzUIam3GG94GpA0fTx8yJN3OyBiaP3eNL65ia99H4RbaqC4fypg7JhBOujlJs7bBTdJKdMUQ/132\",\"user_name\":\"Flynn\"}]";
        CommentsBuilder commentsBuilder = new CommentsBuilder();
        StringBuilder comments = commentsBuilder.build(JSONObject.parseArray(str, Comment.class));
        System.out.println(comments.toString());
    }
}